(function (global) {
    var
        version = "1.0",
        mattelSite = {
            projectBindedArr : [],
            groupUniqueObj: function (resObj, keyName) {
                var data = {};
                if (resObj == undefined || keyName == undefined) return false;
                for (var i = 0; i < resObj.length; ++i) {
                    var obj = resObj[i];
                    if (data[obj[keyName]] === undefined)
                        data[obj[keyName]] = []; //Assign a new array with the first element of DtmStamp.

                    data[obj[keyName]].push(obj);
                }
                return data;
            },
            DOMLoaded: function () {
                document.onreadystatechange = function () {
                    var state = document.readyState
                    if (state == 'interactive') {
                        document.getElementById('page-container').style.visibility = "hidden";
                    } else if (state == 'complete') {
                        document.getElementById('interactive');
                        document.getElementById('page-loading').style.visibility = "hidden";
                        document.getElementById('page-container').style.visibility = "visible";
                    }
                }
            },
            parseQueryString: function (queryString) {
                if (!queryString) return false;
                var query = {};
                var pairs = (queryString[0] === '?' ? queryString.substr(1) : queryString).split('&');
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i].split('=');
                    query[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1] || '');
                }
                return query;
            },
            updateQueryStringParameter: function (key, value, uri) {
                var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
                if (!uri) uri = window.location.href;
                var separator = uri.indexOf('?') !== -1 ? "&" : "?";
                if (uri.match(re)) {
                    return uri.replace(re, '$1' + key + "=" + value + '$2');
                }
                else {
                    return uri + separator + key + "=" + value;
                }
            },
            wrapElement: function (elem, clsName, gridColWrap) {
                for (var i = 0; i < elem.length; i += gridColWrap) {
                    var $div = $("<li/>", { class: clsName });
                    elem.slice(i, i + gridColWrap).wrapAll($div);
                }
            },
            requestAPICall: function (obj, cb) {
                var self = this;
                return $.ajax({
                    type: obj.type,
                    url: location.protocol + '//' + location.host + "/api/" + obj.methodName,
                    contentType: 'application/json',
                    data: JSON.stringify(obj.body),
                    success: function (response) {
                        if (typeof self[cb] == 'function') {
                            self[cb](response);
                        } else if (typeof cb == "function") {
                            cb(response)
                        }
                    },
                    error: function (errrLog) {
                        if (typeof self[cb] == 'function') {
                            self[cb](false);
                            $.notify(obj.methodName + "API Error!", "error");
                        }
                    }
                });
            },
            evenWithODDArrSort : function(res){
                var ar1 = [],ar2=[];
                var result = {};
                for (var i = 0; i < (Object.keys(res)).length; i++) {
                    if(i % 2 === 0) { // index is even
                        ar1.push(Object.keys(res)[i]);
                    } else{
                        ar2.push(Object.keys(res)[i]);
                    }
                }
                ar1 = ar1.concat(ar2);

                ar1.forEach(function(key) {
                    var found = false;
                        if(!result[key]){
                            result[key] = [];
                        }
                        if(!found && res[key]) {
                            result[key] = res[key];
                            found = true;
                            return false;
                        } else 
                            return true;
                })
                return result;
            },
            helperFunction : function(){
                // HBS helper for == and || condition
                var self = this;
                Handlebars.registerHelper('ifCond', function (operator1, v1, v2, v3, v4, options) {

                    switch (operator1) {
                        case '==||':
                            return (v1 == v2 || v3==v4) ? options.fn(this) : options.inverse(this);
                        default:
                            return options.inverse(this);
                    }
                })
                Handlebars.registerHelper('ifHelper', function (v1, operator, v2, options) {

                    switch (operator) {
                        case '==':
                            return (v1 == v2) ? options.fn(this) : options.inverse(this);
                        case '===':
                            return (v1 === v2) ? options.fn(this) : options.inverse(this);
                        case '!=':
                            return (v1 != v2) ? options.fn(this) : options.inverse(this);
                        case '!==':
                            return (v1 !== v2) ? options.fn(this) : options.inverse(this);
                        case '<':
                            return (v1 < v2) ? options.fn(this) : options.inverse(this);
                        case '<=':
                            return (v1 <= v2) ? options.fn(this) : options.inverse(this);
                        case '>':
                            return (v1 > v2) ? options.fn(this) : options.inverse(this);
                        case '>=':
                            return (v1 >= v2) ? options.fn(this) : options.inverse(this);
                        case '&&':
                            return (v1 && v2) ? options.fn(this) : options.inverse(this);
                        case '||':
                            return (v1 || v2) ? options.fn(this) : options.inverse(this);
                        default:
                            return options.inverse(this);
                    }
                });
                Handlebars.registerHelper('titleFormat', function(title) {
                    var title = title.split("."),
                        titleFormat = title[title.length-1];
                    return titleFormat;
                });
                Handlebars.registerHelper('isProjectAlreadyBinded', function(projectId,options) {
                    if(self.projectBindedArr.indexOf(projectId)==-1) {
                        self.projectBindedArr.push(projectId);
                        return options.fn(this)
                    }
                    return options.inverse(this);
                });
            }
        }
    global.mattelSite = mattelSite;

}(typeof window !== "undefined" ? window : this));
/*!
*
* Date: 2018-03-02
*/
(function (global) {
    var
        cookie = {
            cookiePath: "/",
            prepend: function (name, value, options, isString) {
                var ids = [];
                options = options || {};
                if (!value) {
                    value = '';
                    options.expires = -365;
                } else {
                    value = escape(value);
                }
                if (options.expires) {
                    var d = new Date();
                    d.setDate(d.getDate() + options.expires);
                    value += '; expires=' + d.toUTCString();
                }
                if (options.domain) { value += '; domain=' + options.domain; }
                if (options.path) { value += '; path=' + options.path; }
                // get current cookies
                ids = this.get(name, '', isString);

                // split by _
                if (ids !== undefined && ids !== "" && ids !== null) { ids = isString ? ids.split('^') : ids.split('_'); }
                // insert element from the left
                if (!_.isArray(ids)) { ids = [value]; }
                else {
                    // Don't insert repeated cookies
                    if (!this.inCookie(name, value)) { ids.unshift(value); }
                }
                this.arrayToCookie(name, ids, isString);
            },
            arrayToCookie: function (name, ids, isString) {
                var myDate = new Date();
                myDate.setMonth(myDate.getMonth() + 12);
                var newCookie = isString ? name + '=' + ids.join('^') + '; path=' + this.cookiePath : name + '=' + ids.join('_') + '; path=' + this.cookiePath;
                document.cookie = newCookie;
            },
            set: function (name, ids, days) {
                var expires = "";
                if (days) {
                    var date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + (ids || "") + expires + "; path=/";
            },
            delete: function (name) {
                document.cookie = name + '=; Max-Age=-99999999;';
            },
            get: function (name, asArray, isString) {
                var separator;
                var cookies = document.cookie.split(';');

                for (var i = 0; i < cookies.length; i++) {
                    separator = cookies[i].indexOf("=");
                    tempName = $.trim(cookies[i].substr(0, separator));
                    v = cookies[i].substr(separator + 1);
                    if (tempName === name) {
                        if (!asArray) { return unescape(v); }
                        else {
                            if (v.length == 0) { return null; }
                            else { return isString ? unescape(v).split('^') : unescape(v).split('_'); }
                        }
                    }
                }
            },
            getEscapeVal: function (name, asArray, isString) {
                var separator;
                var cookies = document.cookie.split(';');

                for (var i = 0; i < cookies.length; i++) {
                    separator = cookies[i].indexOf("=");
                    tempName = $.trim(cookies[i].substr(0, separator));
                    v = cookies[i].substr(separator + 1);
                    if (tempName === name) {
                        if (!asArray) { return decodeURIComponent(v); }
                        else {
                            if (v.length == 0) { return null; }
                            else { return isString ? decodeURIComponent(v).split('^') : decodeURIComponent(v).split('_'); }
                        }
                    }
                }
            },
            remove: function (name, id, isString) {
                var value;
                var ids;
                var newIds;
                var cookies = document.cookie.split(';');

                for (var i = 0; i < cookies.length; i++) {
                    separator = cookies[i].indexOf("=");
                    tempName = $.trim(cookies[i].substr(0, separator));
                    value = cookies[i].substr(separator + 1);
                    if (tempName === name) {
                        ids = isString ? value.split('^') : value.split('_');
                        newIds = _.without(ids, id + '');
                        this.arrayToCookie(name, newIds);
                    }
                }
            },
            toggleCookie: function (isActive, cookieName, id) {
                if (id !== undefined) {
                    if (isActive) {
                        this.prepend(cookieName, id, '', '');
                    } else {
                        this.remove(cookieName, id, '');
                    }
                }
            },
            inCookie: function (name, id, isString) {
                if (_.indexOf(this.get(name, true, isString), id + '') > -1) {
                    return true;
                }
                return false;
            }
        }

    global.mattelSite.cookie = cookie;
}(typeof window !== "undefined" ? window : this));
/*!
    *
    * Date: 2018-03-02
    */

(function (global) {
    var 

        Pagination = {

        code: '',
        // converting initialize data
        Extend: function (data) {
            data = data || {};
            Pagination.size = data.size || 300;
            Pagination.page = data.page || 1;
            Pagination.step = data.step || 3;
        },
        // add pages by number (from [s] to [f])
        Add: function (s, f) {
            for (var i = s; i < f; i++) {
                Pagination.code += '<a class="page-link" href="page=' + i + '">' + i + '</a>';
            }
        },
        // add last page with separator
        Last: function () {
            Pagination.code += '<i>...</i><a class="page-link" href="page=' + Pagination.size + '">' + Pagination.size + '</a>';
        },
        // add first page with separator
        First: function () {
            Pagination.code += '<a class="page-link" href="page=1">1</a><i>...</i>';
        },
        // change page
        Click: function () {
            Pagination.page = +this.innerHTML;
            Pagination.Start();
        },
        // previous page
        Prev: function () {
            Pagination.page--;
            if (Pagination.page < 1) {
                Pagination.page = 1;
            }
            Pagination.Start();
        },
        // next page
        Next: function () {
            Pagination.page++;
            if (Pagination.page > Pagination.size) {
                Pagination.page = Pagination.size;
            }
            Pagination.Start();
        },
        // binding pages
        Bind: function () {
            var a = Pagination.e.getElementsByTagName('a');
            for (var i = 0; i < a.length; i++) {
                if (+a[i].innerHTML === Pagination.page) a[i].classList.add('current');
                // a[i].addEventListener('click', Pagination.Click, true);
            }
        },
        // write pagination
        Finish: function () {
            Pagination.e.innerHTML = Pagination.code;
            Pagination.code = '';
            Pagination.Bind();
        },
        // find pagination type
        Start: function () {
            if (Pagination.size < Pagination.step * 2 + 6) {
                Pagination.Add(1, Pagination.size + 1);
            }
            else if (Pagination.page < Pagination.step * 2 + 1) {
                Pagination.Add(1, Pagination.step * 2 + 4);
                Pagination.Last();
            }
            else if (Pagination.page > Pagination.size - Pagination.step * 2) {
                Pagination.First();
                Pagination.Add(Pagination.size - Pagination.step * 2 - 2, Pagination.size + 1);
            }
            else {
                Pagination.First();
                Pagination.Add(Pagination.page - Pagination.step, Pagination.page + Pagination.step + 1);
                Pagination.Last();
            }
            Pagination.Finish();
        },
        // create skeleton
        Create: function (e) {

            var html = [
                '<a class="page-link" href="page=1">&laquo;</a>', // previous button
                '<span></span>',  // pagination container
                '<a class="page-link" href="page=' + Pagination.size + '">&raquo;</a>'  // next button
            ];

            e.innerHTML = html.join('');
            Pagination.e = e.getElementsByTagName('span')[0];
            // Pagination.Buttons(e);
        },
        // init
        Init: function (e, data) {
            Pagination.Extend(data);
            Pagination.Create(e);
            Pagination.Start();
        }
    }

    global.mattelSite.pagination = Pagination;
}(typeof window !== "undefined" ? window : this));
/*!
    *
    * Date: 2018-03-02
    */

(function (global) {
    var 
    
    getSubBrands = {
        'FisherPriceBrands': {
            'brand': 'FP',
            'subBrand': 'FISHER-PRICE BRANDS',
            'displayName': 'FISHER-PRICE BRANDS'
        },
        'FisherPriceFriends': {
            'brand': 'FP',
            'subBrand': 'FISHER-PRICE FRIENDS',
            'displayName': 'FISHER-PRICE FRIENDS'
        },
        'MattelBoys': {
            'brand': 'MAT',
            'subBrand': 'BOYS',
            'displayName': 'Mattel Boys'
        },
        'MattelGirls': {
            'brand': 'MAT',
            'subBrand': 'GIRLS',
            'displayName' :'Mattel Girls'
        }
    }
    global.mattelSite.getSubBrands = getSubBrands;
}(typeof window !== "undefined" ? window : this));
/*!
    *
    * Date: 2018-03-02
    */

(function (mat,pagination,cookie,subBrandObj) {
    var 
    
    router = {

    Router: Backbone.Router.extend({
        routes: {
            "teams/:id(/)(?*queryString)": "teamResults",
            "teams/:action/:id": "searchDetail",
            "searchresults/:id": "searchDetail",
            "searchresults": "searchResults",
            "brands/:id(/)(?*queryString)": "searchBrandResults",
            "brands/:action/:id": "searchDetail"
        },
        getSearchResultInit: function (id) {
            if (typeof id.includes == "function" && id.includes("index")) return;
            if (typeof id == "string" && isNaN(id)) {
                return true;
            }
            console.log("Invalid Query String format..")
            return false;
        },
        bindSearchResult: function (response, pageNo, selectedRowVal, serachParams) {
            var tableId = "#search-result-table";
            var showRowsId = "#show-n-rows-container";
            var resposeDatas = response.recordsets;
            var $filterInfo = $(".filter-info-bar");
            var $filterCount = $filterInfo.find("#filter-total-results");
            var $filterInfoList = $filterInfo.find("#filter-info-list");
            var $pageLeftArrow
                ,$pageRightArrow;
            $filterCount.html(response.recordset[0].TotalRecords);
            $filterInfoList.html(serachParams);
            $filterInfo.removeClass('hidden-xs-up');
            if (!_.isEmpty(resposeDatas[1]) || pageNo) {
                var res = "";
                var paginationSize =
                    Math.ceil(resposeDatas[0][0].TotalRecords / selectedRowVal);
                if (pageNo > paginationSize) {
                    console.log("page no: " + pageNo + " is not available.redirecting..");
                    var updatedHref = mat.updateQueryStringParameter('page', paginationSize);
                    window.history.pushState('', '', updatedHref);
                    Backbone.history.checkUrl()
                    return false;
                }
                pagination.Init(document.getElementById('pagination'), {
                    size: paginationSize, // pages size
                    page: pageNo || 1,   // selected page
                    step: 3   // pages before and after current
                });
                $pageLeftArrow = $("#pagination>.page-link:first-child");
                $pageRightArrow = $("#pagination>.page-link:last-child");
                $pageLeftArrow.removeClass('btn disabled');
                $pageRightArrow.removeClass('btn disabled');
                if(paginationSize==1){
                    $('#pagination').addClass("arrow-disabled");
                }
                if(pageNo==undefined || pageNo==1){$pageLeftArrow.addClass('btn disabled');}
                if(pageNo == paginationSize){$pageRightArrow.addClass('btn disabled');}
                $(tableId).addClass('loading');
                var template = Handlebars.templates['searchResults.tmpl'], // your template minus the .js
                    context = {
                        items:resposeDatas[1],
                        baseHref : window.location.href.split('?')[0]
                    }
                    if(context.items.length>1) $filterInfo.addClass('multiple-results-count')
                $(tableId).html(template(context)).removeClass('empty-container loading');
                $(showRowsId).addClass('d-inline').removeClass('d-none');
            } else {
                $(tableId).addClass('empty-container').removeClass('loading').html('')
                $(showRowsId).addClass('d-none').removeClass('d-inline');
            }
        },
        teamResults: function (id, queryString) {
            if (!this.getSearchResultInit(id)) return;
            var self = this;
            var queryString = mat.parseQueryString(queryString);
            var selectedRowVal = mat.page.selectedRowVal();
            var pageNo = queryString.page && parseInt(queryString.page);
            var firstIndex = selectedRowVal * (pageNo - 1);
            var lastIndex = selectedRowVal * pageNo;
            var postObj = {
                teamName: id,
                lastIndex: firstIndex || 0,
                recordsCount: selectedRowVal || 10
            };
            var $activeNav = "";
            var brandName = "";
            var teamName = "";
            mat.requestAPICall({ type: 'post', methodName: 'getProjects', body: postObj }, function (response) {
                brandName = response.recordsets[2];
                if( !_.isEmpty(brandName) && brandName[0].BrandDisplayName){
                    $activeNav = $('#navbar-content li[data-brand-name=' + brandName[0].BrandDisplayName + ']');
                    $activeNav.addClass('active');
                    teamName = brandName[0].team;
                }
                self.bindSearchResult(response, pageNo, selectedRowVal,teamName || id);
            });
        },
        searchDetail : function(queryString,id){
            var $elemId = $("#search-detail-container");
            mat.requestAPICall({ type: 'post', methodName: 'getProjectDetail', body: {'projectNumber' : id || queryString} }, function (response) {
                if(_.isEmpty(response) || _.isEmpty(response.productDocuments)){
                    console.log("Err: Search Detail API Fails..")
                    $elemId.addClass('error-container').removeClass('loading')
                    return false;
                }
                if( !_.isEmpty(response.brandName)){
                    $activeNav = $('#navbar-content li[data-brand-name=' + response.brandName + ']');
                    $activeNav.addClass('active');
                }
                
                var template = Handlebars.templates['searchDetail.tmpl'];
                $elemId.removeClass('empty-container loading').html(template({
                    productAttributes : response.productAttributes,
                    // productDocuments : response.productDocuments,
                    productDocuments : mat.evenWithODDArrSort(response.productDocuments),
                    // displayBrandName : response.brandName,
                    productDocsHalf : (Math.ceil(Object.keys(response.productDocuments).length/2)-1),
                    productDocsSecondHalf : Math.ceil(Object.keys(response.productDocuments).length/2),
                    productDocsSecondHalfEnd : Object.keys(response.productDocuments).length,
                }));
                $('.toggle-accordion').click();
            })

        },
        searchBrandResults: function (id, queryString) {
            var isBrandResultPage = true;
            this.searchResults('brand=' + id + '&' + queryString,isBrandResultPage);
        },
        searchResults: function (urlString,isBrandResultPage) {
            var self = this;
            var urlStringObj = mat.parseQueryString(urlString); // convert url query string to json object.
            // query params are kept in cookie. Check and stop if not available.
            if ((!cookie.get('searchParams') || cookie.get('searchParams') == 'undefined') && !isBrandResultPage){
                 $("#search-result-table").addClass('error-container').removeClass('loading').html('');
                return;
            }  
            var queryString = !isBrandResultPage ? JSON.parse(cookie.getEscapeVal('searchParams')) : urlStringObj;
            if (urlStringObj.page) {
                queryString.page = urlStringObj.page;
            }

			var fullBrandName = queryString.brand;
            var getSubBrand = queryString.brand ? subBrandObj[queryString.brand] : {};
            var selectedRowVal = mat.page.selectedRowVal();
            var pageNo = queryString.page && parseInt(queryString.page);
            var firstIndex = selectedRowVal * (pageNo - 1);
            var lastIndex = selectedRowVal * pageNo;
            var displayBrandName = subBrandObj[queryString.brand].displayName;

            var $activeNav = $('#navbar-content li[data-brand-name=' + queryString.brand + ']');
            $activeNav.addClass('active');

            queryString.lastIndex = firstIndex || 0;
            queryString.recordsCount = selectedRowVal || 10;
            queryString.subBrand = getSubBrand.subBrand;
            queryString.brand = getSubBrand.brand;

            var queryParams = "<span>"+displayBrandName+"</span><span>"+(queryString.projectYear || '')+"</span><span>"+(queryString.projectNumber || '')+"</span><span>"+(queryString.productNumber || '')+"</span><span>"+(queryString.assortmentNumber || '')+"</span><span>"+(queryString.category || '')+"</span><span>"+(queryString.team || '')+"</span><span>"+(queryString.source || '')+"</span><span>"+(queryString.projectDescription || '' )+"</span><span>"+(queryString.productDescription || '')+"</span>";
        
            mat.requestAPICall({ type: 'post', methodName: 'getSearchResults', body: queryString }, function (response) {
                self.bindSearchResult(response, pageNo, selectedRowVal,queryParams);
            })
        }
    }),
    init : function(page){
        mat.page = page;
        mat.helperFunction();
        this.route = new this.Router();
        // Start Backbone history a necessary step for bookmarkable URL's
        Backbone.history.start({
            pushState: true,
            root: '/'
        });
    }
}
    mattelSite.router = router;
}(mattelSite,mattelSite.pagination,mattelSite.cookie,mattelSite.getSubBrands));
/*!
 *
 * Date: 2018-02-15
 * Handlebars run cmd - handlebars events.tmpl -f events.tmpl.js
 */

(function (genericFn, pagination, cookie, subBrandObj,router) {

    var
        showRowCookieName = "showRowCount",
        getRowCount = cookie.get(showRowCookieName);
        page = function () {
            return page.fn.init();
        };
        page.fn = page.prototype = {

        bindingConfig: function () {
            var obj = [{
                'elem': '#navbar-content .nav-item>a',
                'func': 'loadNavigation',
            }, {
                'elem': '#submit-search-results',
                'func': 'submitSearchResult'
            }, {
                'elem': '#pagination .page-link',
                'func': 'paginationClick'
            },{
                'elem': '.toggle-accordion',
                'func': 'toggleAccordion'
            }]
            return obj;
        },
        eventBinding: function ($curEl, callBack) {
            var self = this;
            if (typeof self[callBack] === 'function') {
                $(document).on('click', $curEl, function (evt) {
                    // evt.preventDefault();
                    self[callBack](this, evt);
                    // return false;
                })
            }
        },
        bindLooping: function (obj) {
            var self = this;
            for (var i = 0; i < obj.length; i++) {
                self.eventBinding(obj[i].elem, obj[i].func);
            }
            $('body').on('click', function (e) {
                if (!$('li.dropdown-list').is(e.target)
                    && $('li.dropdown-list').has(e.target).length === 0
                    && $('.show').has(e.target).length === 0
                ) {
                    $('li.dropdown-list').removeClass('show');
                }
            });
            $('#selectBrandName').on('change', function (e) {
                self['getBrandFilterDatas'](this, e)
            });
            $('#show-n-rows option[value=' + getRowCount + ']').attr('selected', true)
            $('#show-n-rows').on('change', function (e) {
                cookie.set(showRowCookieName, this.value);
                location.reload();
            });
        },
        paginationClick: function (elem, evt) {
            evt.preventDefault();
            genericFn.projectBindedArr = [];
            var tableId = "#search-result-table";
            var hrefKeyPair = $(elem).attr('href').split("=");
            if (genericFn.parseQueryString(window.location.search).page != hrefKeyPair[1]) {
                $(tableId).addClass("loading");
            }
            var updatedHref = genericFn.updateQueryStringParameter(hrefKeyPair[0], hrefKeyPair[1]);
            window.history.pushState('', '', updatedHref);
            Backbone.history.checkUrl()
        },
        
        
        // This function for analyzing page time.
        // hide the loading icon when DOM loaded
        selectedRowVal: function (elem) {
            var elem = elem || '#show-n-rows';
            return $(elem).find(":selected").val() || 0;
        },
        toggleAccordion: function(elem){
            var attrId = $(elem).attr("accordion-id");
            var $accordionElem = $(attrId).find(".collapse");
            if($(elem).hasClass('active')){ 
                $accordionElem.collapse("hide"); 
                $(elem).removeClass('active');
            }
            else{ $accordionElem.collapse("show"); $(elem).addClass('active'); }
        },
        loadNavigation: function (el, event) {
            var self = this;
            var elem = el.parentElement;
            var wrapLiLoop = 6;
            var subBrandName = elem.dataset.subBrandName;
            var src = "";
            if (!$(elem).hasClass('show')) $(elem).parent().children('li').removeClass('show')
            if ($(elem).hasClass('dropdown-list')) {
                $(elem).toggleClass('show');
                event.preventDefault();
                // return false;
            }
            if ($(elem).hasClass('api-loaded')) return;
            genericFn.requestAPICall({ type: 'post', methodName: 'getTeamList', body: { 'subBrandId': subBrandName } }, function (response) {
                if (!response && !response.recordset) { console.log("GetTeamList Service API Error."); return; }
                response.recordset.forEach(function (element, index) {
                    src += '<a href="/teams/' + element.item_id +'" class="teamlist-desc">' + element.item_descrip + '</a>'
                });
                $(elem).find(".submenu-carousel").html(src);
                genericFn.wrapElement($(elem).find(".submenu-carousel .teamlist-desc"), 'team-list-wrap', wrapLiLoop)
                $(elem).addClass('api-loaded').find('.submenu-carousel').slick({
                    slidesToShow: 4,
                    slidesToScroll: 1,
                    dots: true,
                    infinite: false,
                    autoplaySpeed: 2000,
                    responsive: [
                        {
                          breakpoint: 1175,
                          settings: {
                            slidesToShow: 1,
                            slidesToScroll: 3,
                            // dots: false
                          }
                        }
                    ]
                })

            });
        },
        getBrandFilterDatas: function (curElem, evnt) {
            var template
                , context
                , getSubBrand = curElem.value ? subBrandObj[curElem.value] : {}
                , obj = {
                    subBrand: getSubBrand.subBrand,
                    brand: getSubBrand.brand
                }
                , $targetId = $("#search-form-wrapper")
                , $submitElem = $(curElem.form).find('input[type="submit"]');
            $targetId.addClass('loading');
            genericFn.requestAPICall({ type: 'post', methodName: 'getBrandFilterDatas', body: obj }, function (response) {
                var res = response && response.recordsets;
                if (!res) {
                    console.log("Err : Dropdown filter API failed..");
                    return false;
                }
                template = Handlebars.templates['searchFilterInputFields.tmpl'] // your template minus the .js
                context = {year: res[0],category: res[1],team: res[2],source: res[3]}
                $targetId.html(template(context)).removeClass('loading');
                $submitElem.removeAttr('disabled');
            })
        },
        submitSearchResult : function(elem,evt){
            var arr = [];
            var formFields = $('#search-form-wrapper input:text,#search-form-wrapper select');
            if(!formFields.length) return;
            formFields.each(function() {
                if($(this).val()){
                    arr.push($(this).val());
                }
            });
            if(_.isEmpty(arr)){
                console.log("Select Atleast one fileds..");
                $("#dialog-modal").modal('show');
                // $.notify("Please enter at least one of the following search fields", "error");
                evt.preventDefault();
                return false;
            }
        },
        init: function () {
            genericFn.DOMLoaded();
            this.bindLooping(this.bindingConfig());
            router.init(this);
        }
    }
    page = new page();

}(mattelSite , mattelSite.pagination,mattelSite.cookie,mattelSite.getSubBrands,mattelSite.router));
